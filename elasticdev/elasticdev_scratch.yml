global_arguments:
   aws_default_region: us-west-1
   docker_repo: flask_sample
infrastructure:
   ecr_repo:
       stack_name: elasticdev:::ecr_repo
       arguments:
          name: flask_sample
   dockerhost:
       stack_name: elasticdev:::ec2_docker_host
       arguments:
          hostname: docker_flask_sample
          size: t2.micro
          disksize: 25
       stack_vars:
           - name: elasticdev:::ubuntu::ec2_ubuntu
             arguments:
                  ip_key: public_ip
build:
   ci_example:
       dependencies: 
           - infrastructure::dockerhost
           - infrastructure::ecr_repo
       stack_name: elasticdev:::ec2_ci
       arguments:
           docker_host: docker_flask_sample
           repo_url: https://github.com/williaumwu/flask_sample
           repo_branch: master
           triggered_branches:
             - master
destroy:
   stack_name: elasticdev:::ed_core::callback_delete
   arguments:
       keep_resources:
           - provider: aws
             resource_type: ecr_repo
       #destroy_resources:
       #    - provider: ec2
       #      resource_type: server
       #    - provider: lightsail
       #      resource_type: server
#infrastructure:
#       vpc:
#           stack_name: elasticdev:::aws_vpc_2tier
#           arguments:
#               vpc_peer: null
#       dockerhost:
#           stack_name: elasticdev:::ec2_docker_host
#           dependencies: 
#               - infrastructure::vpc
#           arguments:
#              size: t2.micro
#              disksize: 25
#           stack_vars:
#               - name: elasticdev:::ubuntu::ec2_ubuntu
#                 arguments:
#                      ip_key: public_ip
#       vpc:
#           stack_name: elasticdev:::aws_vpc_2tier
#           arguments:
#               vpc_peer: null
#       apigateway:
#           stack_name: elasticdev:::api_gateway
#           arguments:
#               name: test3
#global_arguments:
#   region: us-east-1
#   sg_db_label: database
#   sg_web_label: web
#infrastructure:
#   vpc:
#       stack_name: aws_vpc_2tier
#   dockerhost:
#       stack_name: aws_ec2_dockerhost_dev
#       arguments:
#          size: t2.micro
#          disksize: 50
#   kubernetes:
#       dependencies:
#           - infrastructure::dockerhost
#       stack_name: aws_kubernetes
#       arguments:
#          AddCreds: 
#              - name: aws
#                type: aws
#              - name: docker
#          domain: test787.elasticdeploy.com
#          parent_domain: elasticdeploy.com
#          kube_node_size: t2.micro
#          kube_node_count: 0
#          kube_master_size: t2.micro
#   mongodb:
#       stack_name: aws_ec2_mongodb
#       arguments:
#          dbs: 1
#          size: t2.nano
#   rds_mysql:
#       stack_name: aws_db_rds
#       arguments:
#          db_type: mysql
#          flavor: "db.t2.micro"
#          size: 5
#          engine: "MySQL"
#          az: False
#build:
#   flask_sample_1:
#       stack_name: build_dev
#       repo_url: https://github.com/williaumwu/flask_sample
#       repo_branch: dev1
#       triggered_branches:
#                 - dev1
#       arguments:
#          DOCKER_FILE_BUILD: configs/build/Dockerfile
#          DOCKER_PROVIDER: docker.io
#          DOCKER_USERNAME: williaumwu
#          DOCKER_REPO_TYPE: public
#          DOCKER_REPO_NAME: meteror-todos
#       results:
#           - name: deploy_1
#       rename:
#           EnvVars:
#             DOCKER_IMAGE: DOCKER_IMAGE_FLASK
#   triggers:
#       - name: flask_sample_dev1
#         type: trigger
#         path: deploy::flask_dev1
#         channels:
#             - deploy_1
#deploy:
#    flask_dev1:
#       stack_name: deploy_dev
#       arguments:
#           EnvVars:
#               MYSQL_DB_NAME: flask
#               MYSQL_DB_USER: sample
#               MYSQL_DB_PASSWORD: admin123
#           PRE_SCRIPTS:
#              - install_mysql.sh
#              - createdb.sh
#              - create_schema.sh
#           DOCKER_TEMPLATE_FILES:
#              - template_dir: configs/deploy
